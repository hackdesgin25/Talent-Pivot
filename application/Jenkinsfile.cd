pipeline {
    agent any
    triggers {
        pollSCM('H/10 * * * *') // Poll SCM every 10 minutes for CD
    }
    environment {
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-key')
        GCP_PROJECT_ID = 'ltc-reboot25-team-51'
        GCP_REGION = 'us-central1'
        CONTAINER_REGISTRY = 'us-central1-docker.pkg.dev'
        REGISTRY_PATH = 'ltc-reboot25-team-51/talentpivot'
        PATH = "/usr/local/bin:/opt/nodejs/bin:/usr/bin:${env.PATH}"
        NODE_ENV = 'production'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Environment Check') {
            steps {
                sh 'echo "=== Environment Check ==="'
                sh 'node --version'
                sh 'npm --version'
                script {
                    try {
                        sh 'docker --version'
                        // Test if jenkins user can actually use docker
                        try {
                            sh 'docker info > /dev/null 2>&1'
                            env.DOCKER_AVAILABLE = 'true'
                            echo "‚úÖ Docker is installed and accessible"
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è Docker is installed but jenkins user lacks permissions"
                            echo "üîß Fix: Run 'sudo usermod -aG docker jenkins' and restart Jenkins"
                            echo "üìã Or run the fix script: ./fix-docker-permissions.sh"
                            env.DOCKER_AVAILABLE = 'false'
                            currentBuild.result = 'FAILURE'
                            error("Docker permissions issue - jenkins user cannot access Docker daemon")
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Docker not found - CD pipeline requires Docker for containerization"
                        echo "Please install Docker on Jenkins server to enable deployment"
                        env.DOCKER_AVAILABLE = 'false'
                        currentBuild.result = 'FAILURE'
                        error("Docker is required but not installed on Jenkins server")
                    }
                }
                script {
                    try {
                        sh 'gcloud --version'
                        env.GCLOUD_AVAILABLE = 'true'
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è gcloud not found - will need to install Google Cloud SDK"
                        env.GCLOUD_AVAILABLE = 'false'
                    }
                }
            }
        }
        stage('Frontend Build & Lint') {
            steps {
                sh 'echo "=== Frontend Build Starting ==="'
                sh 'npm ci --include=dev --prefer-offline --no-audit'
                sh 'echo "=== Installed packages ==="'
                sh 'npm list --depth=0 || echo "Package list completed"'
                sh 'echo "=== Running ESLint ==="'
                sh 'npx eslint ./src --ignore-pattern dist/ || echo "ESLint warnings found"'
                sh 'echo "=== Running TypeScript check ==="'
                sh 'npx tsc --noEmit || echo "TypeScript compilation warnings"'
                sh 'echo "=== Building project ==="'
                sh 'npm run build'
                sh 'npm run test || echo "No frontend tests"'
            }
        }
        stage('Backend Build & Lint') {
            steps {
                dir('backend') {
                    sh 'echo "=== Backend Build Starting ==="'
                    sh 'echo "=== Installing backend dependencies ==="'
                    sh '''
                        echo "Removing old package-lock.json and node_modules for clean install..."
                        rm -rf package-lock.json node_modules
                        echo "Installing dependencies with npm install..."
                        npm install --prefer-offline --no-audit
                    '''
                    sh 'echo "=== Installed backend packages ==="'
                    sh 'npm list --depth=0 || echo "Backend package list completed"'
                    sh 'echo "=== Running Backend ESLint ==="'
                    sh 'npx eslint ./src --ignore-pattern dist/ || echo "ESLint warnings found"'
                    sh 'echo "=== Running Backend TypeScript check ==="'
                    sh 'npx tsc --noEmit || echo "TypeScript compilation warnings"'
                    sh 'echo "=== Building backend ==="'
                    sh 'npm run build || echo "Backend build completed"'
                    sh 'npm run test || echo "No backend tests"'
                }
            }
        }
        stage('Docker Build & Push') {
            parallel {
                stage('Frontend Docker') {
                    steps {
                        script {
                            withCredentials([file(credentialsId: 'gcp-key', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                                sh '''
                                    echo "=== Configuring GCP Authentication ==="
                                    gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                                    gcloud config set project ${GCP_PROJECT_ID}
                                    
                                    echo "=== Ensuring Artifact Registry repository exists ==="
                                    # Create repository if it doesn't exist
                                    gcloud artifacts repositories describe talentpivot --location=${GCP_REGION} || \\
                                        gcloud artifacts repositories create talentpivot \\
                                            --location=${GCP_REGION} \\
                                            --repository-format=docker \\
                                            --description="TalentPivot Docker images"
                                    
                                    gcloud auth configure-docker ${CONTAINER_REGISTRY} --quiet
                                    
                                    echo "=== Building Frontend Docker Image ==="
                                    docker build -t ${CONTAINER_REGISTRY}/${REGISTRY_PATH}/talentpivot-frontend:${BUILD_NUMBER} \\
                                                 -t ${CONTAINER_REGISTRY}/${REGISTRY_PATH}/talentpivot-frontend:latest .
                                    
                                    echo "=== Pushing Frontend Docker Image ==="
                                    docker push ${CONTAINER_REGISTRY}/${REGISTRY_PATH}/talentpivot-frontend:${BUILD_NUMBER}
                                    docker push ${CONTAINER_REGISTRY}/${REGISTRY_PATH}/talentpivot-frontend:latest
                                '''
                            }
                        }
                    }
                }
                stage('Backend Docker') {
                    steps {
                        script {
                            withCredentials([file(credentialsId: 'gcp-key', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                                sh '''
                                    echo "=== Configuring GCP Authentication ==="
                                    gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                                    gcloud config set project ${GCP_PROJECT_ID}
                                    
                                    echo "=== Ensuring Artifact Registry repository exists ==="
                                    # Create repository if it doesn't exist (idempotent)
                                    gcloud artifacts repositories describe talentpivot --location=${GCP_REGION} || \\
                                        gcloud artifacts repositories create talentpivot \\
                                            --location=${GCP_REGION} \\
                                            --repository-format=docker \\
                                            --description="TalentPivot Docker images"
                                    
                                    gcloud auth configure-docker ${CONTAINER_REGISTRY} --quiet
                                    
                                    echo "=== Building Backend Docker Image ==="
                                    cd backend
                                    docker build -t ${CONTAINER_REGISTRY}/${REGISTRY_PATH}/talentpivot-backend:${BUILD_NUMBER} \\
                                                 -t ${CONTAINER_REGISTRY}/${REGISTRY_PATH}/talentpivot-backend:latest .
                                    
                                    echo "=== Pushing Backend Docker Image ==="
                                    docker push ${CONTAINER_REGISTRY}/${REGISTRY_PATH}/talentpivot-backend:${BUILD_NUMBER}
                                    docker push ${CONTAINER_REGISTRY}/${REGISTRY_PATH}/talentpivot-backend:latest
                                '''
                            }
                        }
                    }
                }
            }
        }
        stage('Deploy to Cloud Run') {
            parallel {
                stage('Deploy Backend') {
                    steps {
                        script {
                            withCredentials([file(credentialsId: 'gcp-key', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                                sh '''
                                    echo "=== Deploying Backend to Cloud Run ==="
                                    gcloud run deploy talentpivot-backend \\
                                        --image ${CONTAINER_REGISTRY}/${REGISTRY_PATH}/talentpivot-backend:${BUILD_NUMBER} \\
                                        --region ${GCP_REGION} \\
                                        --platform managed \\
                                        --allow-unauthenticated \\
                                        --port 8080 \\
                                        --memory 1Gi \\
                                        --cpu 1 \\
                                        --min-instances 0 \\
                                        --max-instances 10 \\
                                        --set-env-vars NODE_ENV=production \\
                                        --set-env-vars JWT_SECRET="talentpivot-jwt-secret-2025" \\
                                        --set-env-vars SQL_HOST="34.63.181.90" \\
                                        --set-env-vars SQL_USER="sqlserver" \\
                                        --set-env-vars SQL_PASSWORD="TalentPivot@1" \\
                                        --set-env-vars SQL_DATABASE="candidate_hub" \\
                                        --set-env-vars SQL_PORT=3306
                                    
                                    # Get backend URL
                                    BACKEND_URL=$(gcloud run services describe talentpivot-backend --region=${GCP_REGION} --format="value(status.url)")
                                    echo "‚úÖ Backend deployed at: $BACKEND_URL"
                                '''
                            }
                        }
                    }
                }
                stage('Deploy Frontend') {
                    steps {
                        script {
                            withCredentials([file(credentialsId: 'gcp-key', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                                sh '''
                                    echo "=== Waiting for Backend to be Ready ==="
                                    sleep 30
                                    
                                    # Get backend URL
                                    BACKEND_URL=$(gcloud run services describe talentpivot-backend --region=${GCP_REGION} --format="value(status.url)" || echo "https://talentpivot-backend.${GCP_REGION}.run.app")
                                    
                                    echo "=== Deploying Frontend to Cloud Run ==="
                                    gcloud run deploy talentpivot-frontend \\
                                        --image ${CONTAINER_REGISTRY}/${REGISTRY_PATH}/talentpivot-frontend:${BUILD_NUMBER} \\
                                        --region ${GCP_REGION} \\
                                        --platform managed \\
                                        --allow-unauthenticated \\
                                        --port 80 \\
                                        --memory 512Mi \\
                                        --cpu 1 \\
                                        --min-instances 0 \\
                                        --max-instances 5 \\
                                        --set-env-vars VITE_API_URL="$BACKEND_URL/api/v1"
                                    
                                    # Get frontend URL
                                    FRONTEND_URL=$(gcloud run services describe talentpivot-frontend --region=${GCP_REGION} --format="value(status.url)")
                                    echo "‚úÖ Frontend deployed at: $FRONTEND_URL"
                                '''
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'dist/**,backend/dist/**', allowEmptyArchive: true
            sh 'docker system prune -f || echo "Docker cleanup completed"'
        }
        failure {
            echo '‚ùå CD pipeline failed! Check logs for details.'
            script {
                sh '''
                    echo "=== Deployment Failure Debug Info ==="
                    echo "üìã Troubleshooting Steps:"
                    echo "1. üê≥ Docker Permission Issue (MOST LIKELY):"
                    echo "   - Run: sudo usermod -aG docker jenkins"
                    echo "   - Run: sudo systemctl restart jenkins"
                    echo "   - Or use the fix script: ./fix-docker-permissions.sh"
                    echo "   - Wait 2-3 minutes for Jenkins to fully restart"
                    echo "   - Then re-run this pipeline"
                    echo ""
                    echo "2. ‚òÅÔ∏è  GCP Issues:"
                    echo "   - Verify service account has Cloud Run Admin role"
                    echo "   - Check if Container Registry API is enabled"
                    echo "   - Ensure Cloud Run API is enabled"
                    echo "   - Run setup script: ./setup-gcp-apis.sh"
                    echo ""
                    echo "3. üîë Authentication Issues:"
                    echo "   - Verify 'gcp-key' credential exists in Jenkins"
                    echo "   - Check service account key file format"
                    echo "   - Ensure project ID is correct: ${GCP_PROJECT_ID}"
                    echo ""
                    
                    echo "=== Current Environment Check ==="
                    which docker > /dev/null && echo "‚úÖ Docker: $(docker --version)" || echo "‚ùå Docker: Not installed"
                    which gcloud > /dev/null && echo "‚úÖ gcloud: $(gcloud --version | head -1)" || echo "‚ùå gcloud: Not installed"
                    echo "üìÅ Project: ${GCP_PROJECT_ID}"
                    echo "üåç Region: ${GCP_REGION}"
                    
                    echo ""
                    echo "=== Docker Permission Test ==="
                    if command -v docker > /dev/null; then
                        if docker info > /dev/null 2>&1; then
                            echo "‚úÖ Docker: Accessible by jenkins user"
                        else
                            echo "‚ùå Docker: Permission denied - jenkins user not in docker group"
                            echo "üîß Fix command: sudo usermod -aG docker jenkins && sudo systemctl restart jenkins"
                        fi
                    else
                        echo "‚ùå Docker: Not installed"
                    fi
                    
                    if command -v gcloud > /dev/null; then
                        echo "=== GCP Services Check ==="
                        gcloud run services list --region=${GCP_REGION} --format="table(metadata.name,status.url)" 2>/dev/null || echo "‚ùå Cannot list Cloud Run services - check authentication"
                    fi
                    
                    if command -v docker > /dev/null && docker info > /dev/null 2>&1; then
                        echo "=== Docker Images ==="
                        docker images | grep talentpivot || echo "‚ÑπÔ∏è  No TalentPivot images found (this is normal for first run)"
                    fi
                '''
            }
        }
        success {
            script {
                sh '''
                    echo "üéâ Deployment completed successfully!"
                    echo "=================================="
                    
                    # Get deployment URLs
                    FRONTEND_URL=$(gcloud run services describe talentpivot-frontend --region=${GCP_REGION} --format="value(status.url)" 2>/dev/null || echo "Not deployed")
                    BACKEND_URL=$(gcloud run services describe talentpivot-backend --region=${GCP_REGION} --format="value(status.url)" 2>/dev/null || echo "Not deployed")
                    
                    echo "üì± Frontend URL: $FRONTEND_URL"
                    echo "üîß Backend URL: $BACKEND_URL"
                    echo "üê≥ Images pushed to: ${CONTAINER_REGISTRY}/${GCP_PROJECT_ID}"
                    echo "üì¶ Build Number: ${BUILD_NUMBER}"
                    echo "üåç Region: ${GCP_REGION}"
                    echo "=================================="
                    echo "‚ö†Ô∏è  Remember to:"
                    echo "   1. Update database credentials in Cloud Run"
                    echo "   2. Configure custom domains if needed"
                    echo "   3. Set up monitoring and logging"
                    echo "   4. Configure SSL certificates"
                '''
            }
        }
    }
}
